如何审核代码
===============================================================================

.. contents::

审核代码的原则
-------------------------------------------------------------------------------

审核代码的目的是：

1. 代码是否能正确执行
#. 代码的是否产生正确的结果

要达到这两个目的，往往需要：

1. 逐行执行整个项目的全部代码
#. 根据上下文研究每个参数
#. 比较审核时的结果与之前的结果是否相同，如果不同是否影响以后的结果
#. ...

项目目录结构说明
-------------------------------------------------------------------------------

一个项目的代码发送过来之后，往往具有这样的目录结构：

.. code-block:: text

    .
    ├── ANALYSIS.md
    ├── data
    │   └── expr-tcga.tsv
    ├── figs
    │   ├── elblow-method.pdf
    │   └── gap-stat.pdf
    ├── output
    │   └── es.tsv
    └── src
        ├── cs.R
        └── unsupv.R

不管目录有多复杂，总结起来，整体目录结构应该是这样的：

.. code-block:: text

    ├── ANALYSIS.md：分析流程说明
    ├── data：数据目录
    ├── doc：文档目录
    ├── figs：输出图片目录
    ├── output：输出文件目录
    └── src：代码目录

其中 ``ANALYSIS.md`` 尤为重要，它是整个项目执行分析的流程，审核代码需要根据该文件，对每个程序的每行代码一一审核。

``ANALYSIS.md`` 示例：

.. code-block:: text

    # BMG190705001-乳腺癌TME+突变分析

    ## 1. 运行CIBERSORT获取细胞丰度

    ```
    $ Rscript src/cs.R
    ```

    输入：

    1. `data/expr-tcga.tsv`

    输出文件：

    1. `output/es.tsv`

    ## 2. 无监督聚类探索样本分类

    ```
    $ Rscript src/unsupv.R
    ```

    输入：

    1. `data/es.tsv`

    输出图片：

    1. `figs/elbow-method.pdf`
    2. `figs/gap-stat.pdf`

如何进行审核
-------------------------------------------------------------------------------

1. 建立审核文件夹： ``代码审核：[项目代号][代码版本号]`` ，例如： ``代码审核：BMG190705001-乳腺癌TME+突变分析v1``
#. 打开 ``src/cs.R`` ，逐行检查代码
#. 运行产生结果 ``ouptut/es.tsv`` ，比较与原结果是否相同。
#. 生成审核文件（见后文审核文件示例），例如： ``代码审核：BMG190705001-乳腺癌TME+突变分析/cs.md``
#. 打开 ``src/unsupv.R`` ，逐行检查代码
#. 运行产生结果 ``output/elbow-method.pdf`` 、 ``figs/gap-stat.pdf`` ，比较与原结果是否相同。
#. 生成审核文件（见后文审核文件示例），例如： ``代码审核：BMG190705001-乳腺癌TME+突变分析/unsupv.md``
#. ...

这样就对 ``src目录`` 的每个代码生成了一个审核文件， ``代码审核：BMG190705001-乳腺癌TME+突变分析`` 即为审核结果。

级别的评定
-------------------------------------------------------------------------------

1. A：程序注结构清晰、注释详尽、无错误、结果正确
#. B：程序无错误、结果正确
#. C：程序无错误，与原结果不一致
#. D：程序有不影响结果的错误
#. E：程序有只影响此步骤的错误
#. F：程序有影响整体结果的错误
#. G：程序无法执行

审核文件示例
-------------------------------------------------------------------------------

A、B级别示例
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. code-block:: text

    # src/cs.R审核文件

    ## 级别

    A

    ## 说明

    程序结构清晰、注释详尽、无错误（可以补充一下自己打A级别的原因）

    ## 结果比较

    运行 `src/cs.R` 产生的结果与原结果完全一致。

C级别示例
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. code-block:: text

    # src/cs.R审核文件

    ## 级别

    C

    ## 说明

    程序无错误，但是结果与原结果不一致

    ## 结果比较

    运行 `src/cs.R` 产生的结果与原结果不一致。（可以列举不一致的地方，例如，原结果有1800个差异基因，
    本次审核只产生1000个差异基因。）

D级别示例
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. code-block:: text

    # src/cs.R审核文件

    ## 级别

    D

    ## 说明

    程序有xxx错误，但是错误不影响结果。xxx函数的xxx参数，应为xxx，程序里面却为xxx。但是由于xxx，不影响结果。


E级别示例
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. code-block:: text

    # src/cs.R审核文件

    ## 级别

    E

    ## 说明

    程序的xx处有xxx错误，正确的应为xxx。由于xxx，本错误只影响了本步骤的结果。

F级别示例
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. code-block:: text

    # src/cs.R审核文件

    ## 级别

    F

    ## 说明

    程序的xxx处有xxx错误，该错误导致整体结果发生了xxx错误。

G级别示例
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

.. code-block:: text

    # src/cs.R审核文件

    ## 级别

    G

    ## 说明

    程序由于xxx原因无法执行。
